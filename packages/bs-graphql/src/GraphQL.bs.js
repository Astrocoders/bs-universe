// Generated by BUCKLESCRIPT VERSION 4.0.2, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Graphql = require("graphql");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function field(name, type_, resolve) {
  return /* record */[
          /* name */name,
          /* type_ */type_,
          /* resolve */resolve
        ];
}

function schema(query) {
  return new Graphql.GraphQLSchema({
              query: query
            });
}

function obj(name, fields) {
  var objDict = { };
  Belt_Array.forEach($$Array.of_list(fields), (function (field) {
          var match = field[/* type_ */1];
          var tmp;
          if (typeof match === "number") {
            tmp = match !== 0 ? Graphql.GraphQLString : Graphql.GraphQLInt;
          } else {
            throw [
                  Caml_builtin_exceptions.match_failure,
                  /* tuple */[
                    "GraphQL.re",
                    49,
                    18
                  ]
                ];
          }
          objDict[field[/* name */0]] = {
            type: tmp,
            resolve: field[/* resolve */2]
          };
          return /* () */0;
        }));
  return new Graphql.GraphQLObjectType({
              name: name,
              fields: objDict
            });
}

var schema$1 = schema(obj("RootQueryType", /* :: */[
          /* record */[
            /* name */"times",
            /* type_ : Int */0,
            /* resolve */(function (_, _$1) {
                return 2;
              })
          ],
          /* [] */0
        ]));

exports.field = field;
exports.obj = obj;
exports.schema = schema$1;
/* schema Not a pure module */
